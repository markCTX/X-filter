#!/bin/bash

# X-filter: A black hole for Internet advertisements
# (c) 2017 X-filter, LLC (https://x-filter.net)
# Network-wide ad blocking via your own hardware.
#
# Controller for all xfilter scripts and functions.
#
# This file is copyright under the latest version of the EUPL.
# Please see LICENSE file for your rights under this license.

readonly X_FILTER_SCRIPT_DIR="/opt/xfilter"
readonly gravitylist="/etc/xfilter/gravity.list"
readonly blacklist="/etc/xfilter/black.list"

# setupVars is not readonly here because in some funcitons (checkout),
# it might get set again when the installer is sourced. This causes an
# error due to modifying a readonly variable.
setupVars="/etc/xfilter/setupVars.conf"

readonly colfile="${X_FILTER_SCRIPT_DIR}/COL_TABLE"
source "${colfile}"

resolver="xfilter-FTL"

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
  if [[ -x "$(command -v sudo)" ]]; then
    exec sudo bash "$0" "$@"
    exit $?
  else
    echo -e "  ${CROSS} sudo is needed to run xfilter commands.  Please run this script as root or install sudo."
    exit 1
  fi
fi

webpageFunc() {
  source "${X_FILTER_SCRIPT_DIR}/webpage.sh"
  main "$@"
  exit 0
}

listFunc() {
  "${X_FILTER_SCRIPT_DIR}"/list.sh "$@"
  exit 0
}

debugFunc() {
  local automated
  local web

  # Pull off the `debug` leaving passed call augmentation flags in $1
  shift
  if [[ "$@" == *"-a"* ]]; then
    automated="true"
  fi
  if [[ "$@" == *"-w"* ]]; then
    web="true"
  fi

  AUTOMATED=${automated:-} WEBCALL=${web:-} "${X_FILTER_SCRIPT_DIR}"/xfilterDebug.sh
  exit 0
}

flushFunc() {
  "${X_FILTER_SCRIPT_DIR}"/xfilterLogFlush.sh "$@"
  exit 0
}

updateXfilterFunc() {
  shift
  "${X_FILTER_SCRIPT_DIR}"/update.sh "$@"
  exit 0
}

reconfigureXfilterFunc() {
  /etc/.xfilter/automated\ install/basic-install.sh --reconfigure
  exit 0;
}

updateGravityFunc() {
  "${X_FILTER_SCRIPT_DIR}"/gravity.sh "$@"
  exit $?
}

queryFunc() {
  shift
  "${X_FILTER_SCRIPT_DIR}"/query.sh "$@"
  exit 0
}

chronometerFunc() {
  shift
  "${X_FILTER_SCRIPT_DIR}"/chronometer.sh "$@"
  exit 0
}


uninstallFunc() {
  "${X_FILTER_SCRIPT_DIR}"/uninstall.sh
  exit 0
}

versionFunc() {
  shift
  "${X_FILTER_SCRIPT_DIR}"/version.sh "$@"
  exit 0
}

restartDNS() {
  local svcOption svc str output status
  svcOption="${1:-}"

  # Determine if we should reload or restart restart
  if [[ "${svcOption}" =~ "reload" ]]; then
    # Using SIGHUP will NOT re-read any *.conf files
    svc="killall -s SIGHUP ${resolver}"
  else
    # Get PID of resolver to determine if it needs to start or restart
    if pidof xfilter-FTL &> /dev/null; then
      svcOption="restart"
    else
      svcOption="start"
    fi
    svc="service ${resolver} ${svcOption}"
  fi

  # Print output to Terminal, but not to Web Admin
  str="${svcOption^}ing DNS service"
  [[ -t 1 ]] && echo -ne "  ${INFO} ${str}..."

  output=$( { ${svc}; } 2>&1 )
  status="$?"

  if [[ "${status}" -eq 0 ]]; then
    [[ -t 1 ]] && echo -e "${OVER}  ${TICK} ${str}"
    return 0
  else
    [[ ! -t 1 ]] && local OVER=""
    echo -e "${OVER}  ${CROSS} ${output}"
    return 1
  fi
}

xfilterEnable() {
  if [[ "${2}" == "-h" ]] || [[ "${2}" == "--help" ]]; then
    echo "Usage: xfilter disable [time]
Example: 'xfilter disable', or 'xfilter disable 5m'
Disable X-filter subsystems

Time:
  #s                  Disable X-filter functionality for # second(s)
  #m                  Disable X-filter functionality for # minute(s)"
    exit 0

  elif [[ "${1}" == "0" ]]; then
    # Disable X-filter
    if [[ -e "${gravitylist}" ]]; then
      mv "${gravitylist}" "${gravitylist}.bck"
      echo "" > "${gravitylist}"
    fi
    if [[ -e "${blacklist}" ]]; then
      mv "${blacklist}" "${blacklist}.bck"
      echo "" > "${blacklist}"
    fi
    if [[ $# > 1 ]]; then
      local error=false
      if [[ "${2}" == *"s" ]]; then
        tt=${2%"s"}
        if [[ "${tt}" =~ ^-?[0-9]+$ ]];then
          local str="Disabling blocking for ${tt} seconds"
          echo -e "  ${INFO} ${str}..."
          local str="Blocking will be re-enabled in ${tt} seconds"
          nohup bash -c "sleep ${tt}; xfilter enable" </dev/null &>/dev/null &
        else
          local error=true
        fi
      elif [[ "${2}" == *"m" ]]; then
        tt=${2%"m"}
          if [[ "${tt}" =~ ^-?[0-9]+$ ]];then
          local str="Disabling blocking for ${tt} minutes"
          echo -e "  ${INFO} ${str}..."
          local str="Blocking will be re-enabled in ${tt} minutes"
          tt=$((${tt}*60))
          nohup bash -c "sleep ${tt}; xfilter enable" </dev/null &>/dev/null &
        else
          local error=true
        fi
      elif [[ -n "${2}" ]]; then
        local error=true
      else
        echo -e "  ${INFO} Disabling blocking"
      fi

      if [[ ${error} == true ]];then
        echo -e "  ${COL_LIGHT_RED}Unknown format for delayed reactivation of the blocking!${COL_NC}"
        echo -e "  Try 'xfilter disable --help' for more information."
        exit 1
      fi

      local str="X-filter Disabled"
      sed -i "/BLOCKING_ENABLED=/d" "${setupVars}"
      echo "BLOCKING_ENABLED=false" >> "${setupVars}"
    fi
  else
    # Enable X-filter
    echo -e "  ${INFO} Enabling blocking"
    local str="X-filter Enabled"

    if [[ -e "${gravitylist}.bck" ]]; then
      mv "${gravitylist}.bck" "${gravitylist}"
    fi
    if [[ -e "${blacklist}.bck" ]]; then
      mv "${blacklist}.bck" "${blacklist}"
    fi
    sed -i "/BLOCKING_ENABLED=/d" "${setupVars}"
    echo "BLOCKING_ENABLED=true" >> "${setupVars}"
  fi

  restartDNS reload

  echo -e "${OVER}  ${TICK} ${str}"
}

xfilterLogging() {
  shift
  if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    echo "Usage: xfilter logging [options]
Example: 'xfilter logging on'
Specify whether the X-filter log should be used

Options:
  on                  Enable the X-filter log at /var/log/xfilter.log
  off                 Disable and flush the X-filter log at /var/log/xfilter.log
  off noflush         Disable the X-filter log at /var/log/xfilter.log"
    exit 0
  elif [[ "${1}" == "off" ]]; then
    # Disable logging
    sed -i 's/^log-queries/#log-queries/' /etc/dnsmasq.d/01-xfilter.conf
    sed -i 's/^QUERY_LOGGING=true/QUERY_LOGGING=false/' /etc/xfilter/setupVars.conf
    if [[ "${2}" != "noflush" ]]; then
      # Flush logs
      xfilter -f
    fi
    echo -e "  ${INFO} Disabling logging..."
    local str="Logging has been disabled!"
  elif [[ "${1}" == "on" ]]; then
    # Enable logging
    sed -i 's/^#log-queries/log-queries/' /etc/dnsmasq.d/01-xfilter.conf
    sed -i 's/^QUERY_LOGGING=false/QUERY_LOGGING=true/' /etc/xfilter/setupVars.conf
    echo -e "  ${INFO} Enabling logging..."
    local str="Logging has been enabled!"
  else
    echo -e "  ${COL_LIGHT_RED}Invalid option${COL_NC}
  Try 'xfilter logging --help' for more information."
    exit 1
  fi
  restartDNS
  echo -e "${OVER}  ${TICK} ${str}"
}

statusFunc() {
  # Determine if service is running on port 53 (Cr: https://superuser.com/a/806331)
  if (echo > /dev/tcp/127.0.0.1/53) >/dev/null 2>&1; then
    if [[ "${1}" != "web" ]]; then
      echo -e "  ${TICK} DNS service is running"
    fi
  else
    case "${1}" in
      "web") echo "-1";;
      *) echo -e "  ${CROSS} DNS service is NOT running";;
    esac
    return 0
  fi

  # Determine if X-filter's blocking is enabled
  if grep -q "BLOCKING_ENABLED=false" /etc/xfilter/setupVars.conf; then
    # A config is commented out
    case "${1}" in
      "web") echo 0;;
      *) echo -e "  ${CROSS} X-filter blocking is Disabled";;
    esac
  elif grep -q "BLOCKING_ENABLED=true" /etc/xfilter/setupVars.conf;  then
    # Configs are set
    case "${1}" in
      "web") echo 1;;
      *) echo -e "  ${TICK} X-filter blocking is Enabled";;
    esac
  else
    # No configs were found
    case "${1}" in
      "web") echo 99;;
      *) echo -e "  ${INFO} X-filter blocking will be enabled";;
    esac
    # Enable blocking
    xfilter enable
  fi
}

tailFunc() {
  # Warn user if X-filter's logging is disabled
  local logging_enabled=$(grep -c "^log-queries" /etc/dnsmasq.d/01-xfilter.conf)
  if [[ "${logging_enabled}" == "0" ]]; then
    # No "log-queries" lines are found.
    # Commented out lines (such as "#log-queries") are ignored
    echo "  ${CROSS} Warning: Query logging is disabled"
  fi
  echo -e "  ${INFO} Press Ctrl-C to exit"

  # Retrieve IPv4/6 addresses
  source /etc/xfilter/setupVars.conf

  # Strip date from each line
  # Colour blocklist/blacklist/wildcard entries as red
  # Colour A/AAAA/DHCP strings as white
  # Colour everything else as gray
  tail -f /var/log/xfilter.log | sed -E \
    -e "s,($(date +'%b %d ')| dnsmasq[.*[0-9]]),,g" \
    -e "s,(.*(gravity.list|black.list|regex.list| config ).* is (0.0.0.0|::|NXDOMAIN|${IPV4_ADDRESS%/*}|${IPV6_ADDRESS:-NULL}).*),${COL_RED}&${COL_NC}," \
    -e "s,.*(query\\[A|DHCP).*,${COL_NC}&${COL_NC}," \
    -e "s,.*,${COL_GRAY}&${COL_NC},"
  exit 0
}

xfilterCheckoutFunc() {
  if [[ "$2" == "-h" ]] || [[ "$2" == "--help" ]]; then
    echo "Usage: xfilter checkout [repo] [branch]
Example: 'xfilter checkout master' or 'xfilter checkout core dev'
Switch X-filter subsystems to a different Github branch

Repositories:
  core [branch]       Change the branch of X-filter's core subsystem
  web [branch]        Change the branch of Web Interface subsystem
  ftl [branch]        Change the branch of X-filter's FTL subsystem

Branches:
  master              Update subsystems to the latest stable release
  dev                 Update subsystems to the latest development release
  branchname          Update subsystems to the specified branchname"
    exit 0
  fi

  source "${X_FILTER_SCRIPT_DIR}"/xfilterCheckout.sh
  shift
  checkout "$@"
}

tricorderFunc() {
  if [[ ! -p "/dev/stdin" ]]; then
    echo -e "  ${INFO} Please do not call Tricorder directly"
    exit 1
  fi

  if ! (echo > /dev/tcp/tricorder.x-filter.net/9998) >/dev/null 2>&1; then
    echo -e "  ${CROSS} Unable to connect to X-filter's Tricorder server"
    exit 1
  fi

  if command -v openssl &> /dev/null; then
    openssl s_client -quiet -connect tricorder.x-filter.net:9998 2> /dev/null < /dev/stdin
    exit "$?"
  else
    echo -e "  ${INFO} ${COL_YELLOW}Security Notice${COL_NC}: ${COL_WHITE}openssl${COL_NC} is not installed
       Your debug log will be transmitted unencrypted via plain-text
       There is a possibility that this could be intercepted by a third party
       If you wish to cancel, press Ctrl-C to exit within 10 seconds"
    secs="10"
    while [[ "$secs" -gt "0" ]]; do
       echo -ne "."
       sleep 1
       : $((secs--))
    done
    echo " "
    nc tricorder.x-filter.net 9999 < /dev/stdin
    exit "$?"
  fi
}

updateCheckFunc() {
  "${X_FILTER_SCRIPT_DIR}"/updatecheck.sh "$@"
  exit 0
}

helpFunc() {
  echo "Usage: xfilter [options]
Example: 'xfilter -w -h'
Add '-h' after specific commands for more information on usage

Whitelist/Blacklist Options:
  -w, whitelist       Whitelist domain(s)
  -b, blacklist       Blacklist domain(s)
  --wild, wildcard     Wildcard blacklist domain(s)
  --regex, regex       Regex blacklist domains(s)
                        Add '-h' for more info on whitelist/blacklist usage

Debugging Options:
  -d, debug           Start a debugging session
                        Add '-a' to enable automated debugging
  -f, flush           Flush the X-filter log
  -r, reconfigure     Reconfigure or Repair X-filter subsystems
  -t, tail            View the live output of the X-filter log

Options:
  -a, admin           Web interface options
                        Add '-h' for more info on Web Interface usage
  -c, chronometer     Calculates stats and displays to an LCD
                        Add '-h' for more info on chronometer usage
  -g, updateGravity   Update the list of ad-serving domains
  -h, --help, help    Show this help dialog
  -l, logging         Specify whether the X-filter log should be used
                        Add '-h' for more info on logging usage
  -q, query           Query the adlists for a specified domain
                        Add '-h' for more info on query usage
  -up, updateXfilter   Update X-filter subsystems
                        Add '--check-only' to exit script before update is performed.
  -v, version         Show installed versions of X-filter, Web Interface & FTL
                        Add '-h' for more info on version usage
  uninstall           Uninstall X-filter from your system
  status              Display the running status of X-filter subsystems
  enable              Enable X-filter subsystems
  disable             Disable X-filter subsystems
                        Add '-h' for more info on disable usage
  restartdns          Restart X-filter subsystems
  checkout            Switch X-filter subsystems to a different Github branch
                        Add '-h' for more info on checkout usage";
  exit 0
}

if [[ $# = 0 ]]; then
  helpFunc
fi

# Handle redirecting to specific functions based on arguments
case "${1}" in
  "-w" | "whitelist"            ) listFunc "$@";;
  "-b" | "blacklist"            ) listFunc "$@";;
  "--wild" | "wildcard"          ) listFunc "$@";;
  "--regex" | "regex"            ) listFunc "$@";;
  "-d" | "debug"                ) debugFunc "$@";;
  "-f" | "flush"                ) flushFunc "$@";;
  "-up" | "updateXfilter"        ) updateXfilterFunc "$@";;
  "-r"  | "reconfigure"         ) reconfigureXfilterFunc;;
  "-g" | "updateGravity"        ) updateGravityFunc "$@";;
  "-c" | "chronometer"          ) chronometerFunc "$@";;
  "-h" | "help"                 ) helpFunc;;
  "-v" | "version"              ) versionFunc "$@";;
  "-q" | "query"                ) queryFunc "$@";;
  "-l" | "logging"              ) xfilterLogging "$@";;
  "uninstall"                   ) uninstallFunc;;
  "enable"                      ) xfilterEnable 1;;
  "disable"                     ) xfilterEnable 0 "$2";;
  "status"                      ) statusFunc "$2";;
  "restartdns"                  ) restartDNS "$2";;
  "-a" | "admin"                ) webpageFunc "$@";;
  "-t" | "tail"                 ) tailFunc;;
  "checkout"                    ) xfilterCheckoutFunc "$@";;
  "tricorder"                   ) tricorderFunc;;
  "updatechecker"               ) updateCheckFunc "$@";;
  *                             ) helpFunc;;
esac
